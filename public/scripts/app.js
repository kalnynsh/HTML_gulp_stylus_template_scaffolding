"use strict";

(function ($) {
  $(document).ready(function () {
    var form = document.forms.form01;
    var inputName = form.elements.inputName;
    var phone = form.elements.phone;
    var email = form.elements.email;
    // var button = form.elements.btnSubmit;

    function iSnameValid(str) {
      var reg = /[a-zа-яё\D]{3,}\s*?/i;
      return reg.test(str);
    }

    function iSphoneValid(str) {
      var reg = /[+7]\(\d{3}\)\d{3}-\d{4}/;
      return reg.test(str);
    }

    function iSemailValid(str) {
      var reg = /\w+\.?-?\w+@mail\.ru/;
      return reg.test(str);
    }
    // Name validation begin
    inputName.addEventListener("change", validateName);
    inputName.addEventListener("focus", resetName);

    /**
     * validateName - function for validation name's input
     */
    function validateName() {
      if (!iSnameValid(inputName.value)) {
        inputName.classList.add("error");
        var errorEl = document.getElementById("nameError");
        errorEl.classList.add("error");
        errorEl.textContent = "Name is not valid. Please correct it.";

        $("#nameError").css("color", "red").effect("shake", 500);
      }
    }

    /**
     * resetName - function for reset input field with name
     *
     */
    function resetName() {
      if (inputName.classList.contains("error")) {
        // сбросить состояние "ошибка", если оно есть
        inputName.classList.remove("error");
        document.getElementById("nameError").textContent = "";
      }
    }
    // Name validation end

    // Phone number validation begin
    phone.addEventListener("change", validatePhone);
    phone.addEventListener("focus", resetPhone);

    /**
     * validatePhone - function for validation phone number
     *
     */
    function validatePhone() {
      if (!iSphoneValid(phone.value)) {
        phone.classList.add("error");
        var errorEl = document.getElementById("phoneError");
        errorEl.classList.add("error");
        errorEl.textContent = "Phone number is not valid. Please correct it.";
        $("#phoneError").css("color", "red").effect("shake", 500);
      }
    }

    /**
     * resetPhone - function for reset input field with phone
     *
     */
    function resetPhone() {
      if (phone.classList.contains("error")) {
        // сбросить состояние "ошибка", если оно есть
        phone.classList.remove("error");
        document.getElementById("phoneError").textContent = "";
      }
    }
    // Phone number validation end

    // Email input validation begin
    email.addEventListener("change", validateEmail);
    email.addEventListener("focus", resetEmail);

    /**
     * validateEmail - function for validation email input
     *
     */
    function validateEmail() {
      if (!iSemailValid(email.value)) {
        email.classList.add("error");
        var errorEl = document.getElementById("emailError");
        errorEl.classList.add("error");
        errorEl.textContent = "Email input is not valid. Please correct it.";

        $("#emailError").css("color", "red").effect("shake", 500);
      }
    }

    /**
     * resetEmail - function
     * for reset input field with email
     *
     */
    function resetEmail() {
      if (email.classList.contains("error")) {
        // сбросить состояние "ошибка", если оно есть
        email.classList.remove("error");
        document.getElementById("emailError").textContent = "";
      }
    }
    // Email input validation end

    if ($("#nameError").hasClass("error")) {
      $("#nameError").effect("shake", {}, 500, function () {
        setTimeout(function () {
          $("#nameError").removeAttr("style").hide().fadeIn();
        }, 1000);
      });
    }
    //
  });
})(jQuery);

"use strict";

(function ($) {
  $(document).ready(function () {
    var TOWNS_URL = "json/towns.json";
    // var ACTIVE = "active";

    var townsArray;

    $.getJSON(TOWNS_URL, function (data) {
      $.each(data, function (i, town) {
        $("#towns-list").append(town + "<br>");
      });
    }).fail(function () {
      console.log("Fail to load JSON`s Towns List");
    });

    $("#date-pickerID").datepicker({
      monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь"],
      dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
      firstDay: 1,
      dateFormat: "dd.mm.yy"
    });

    //
  });
})(jQuery);

(function () {
  'use strict';

  var sliders = document.querySelectorAll('.slider');
  if (!sliders.length) {
    return;
  }

  Array.prototype.forEach.call(sliders, initSlider);

  function initSlider(slider) {
    var slides = slider.querySelectorAll('.slider__slide');
    if (slides.length < 2) {
      slider.classList.add('slider_inactive');
      return;
    }

    var transitionDuration = app.lib.getTransitionDuration(slides[0]);
    var activeInd = 0;
    var inProgress = false;

    slider.querySelector('.slider__prev').addEventListener('click', function (e) {
      e.preventDefault();
      switchSlide('prev');
    });
    slider.querySelector('.slider__next').addEventListener('click', function (e) {
      e.preventDefault();
      switchSlide('next');
    });

    function switchSlide(dir) {
      if (inProgress) {
        return;
      }
      inProgress = true;
      slides[0].parentNode.style.height = slides[activeInd].offsetHeight + 'px';

      var newInd = dir === 'prev' ? activeInd - 1 : activeInd + 1;
      if (newInd < 0) {
        newInd = slides.length - 1;
      } else if (newInd > slides.length - 1) {
        newInd = 0;
      }

      if (dir === 'prev') {
        slides[activeInd].classList.add('slider__slide_fadingout_prev');
        slides[newInd].classList.add('slider__slide_fadingin_prev');
        slides[0].parentNode.style.height = slides[newInd].offsetHeight + 'px';
        slides[newInd].classList.add('slider__slide_active');
        slides[newInd].classList.remove('slider__slide_fadingin_prev');
      } else {
        slides[activeInd].classList.add('slider__slide_fadingout_next');
        slides[newInd].classList.add('slider__slide_fadingin_next');
        slides[0].parentNode.style.height = slides[newInd].offsetHeight + 'px';
        slides[newInd].classList.add('slider__slide_active');
        slides[newInd].classList.remove('slider__slide_fadingin_next');
      }

      setTimeout(function () {
        slides[0].parentNode.style.height = '';
        slides[activeInd].classList.remove('slider__slide_fadingout_prev');
        slides[activeInd].classList.remove('slider__slide_fadingout_next');
        slides[activeInd].classList.remove('slider__slide_active');
        activeInd = newInd;
        inProgress = false;
      }, transitionDuration);
    }
  }
})();

'use strict';
//# sourceMappingURL=data:application/json;charset=utf8;base64,
